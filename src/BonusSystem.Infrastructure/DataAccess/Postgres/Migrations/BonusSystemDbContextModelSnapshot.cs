// <auto-generated />
using System;
using BonusSystem.Infrastructure.DataAccess.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BonusSystem.Infrastructure.DataAccess.Postgres.Migrations
{
    [DbContext(typeof(BonusSystemDbContext))]
    partial class BonusSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("bonus")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.CompanyEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BonusBalance")
                        .HasColumnType("numeric");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("OriginalBonusBalance")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.ToTable("companies", "bonus");
                });

            modelBuilder.Entity("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.NotificationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("IsRead");

                    b.HasIndex("RecipientId");

                    b.HasIndex("Type");

                    b.ToTable("notifications", "bonus");
                });

            modelBuilder.Entity("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.StoreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Name");

                    b.HasIndex("Status");

                    b.ToTable("stores", "bonus");
                });

            modelBuilder.Entity("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.StoreSellerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("StoreId", "UserId")
                        .IsUnique();

                    b.ToTable("store_sellers", "bonus");
                });

            modelBuilder.Entity("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.TransactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Status");

                    b.HasIndex("StoreId");

                    b.HasIndex("Timestamp");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.ToTable("transactions", "bonus");
                });

            modelBuilder.Entity("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BonusBalance")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Role");

                    b.HasIndex("Username");

                    b.ToTable("users", "bonus");
                });

            modelBuilder.Entity("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.NotificationEntity", b =>
                {
                    b.HasOne("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.UserEntity", "Recipient")
                        .WithMany("Notifications")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.StoreEntity", b =>
                {
                    b.HasOne("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.CompanyEntity", "Company")
                        .WithMany("Stores")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.StoreSellerEntity", b =>
                {
                    b.HasOne("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.StoreEntity", "Store")
                        .WithMany("Sellers")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.UserEntity", "User")
                        .WithMany("Stores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.TransactionEntity", b =>
                {
                    b.HasOne("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.CompanyEntity", "Company")
                        .WithMany("Transactions")
                        .HasForeignKey("CompanyId");

                    b.HasOne("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.StoreEntity", "Store")
                        .WithMany("Transactions")
                        .HasForeignKey("StoreId");

                    b.HasOne("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.UserEntity", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.CompanyEntity", b =>
                {
                    b.Navigation("Stores");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.StoreEntity", b =>
                {
                    b.Navigation("Sellers");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("BonusSystem.Infrastructure.DataAccess.Postgres.Entities.UserEntity", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Stores");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}